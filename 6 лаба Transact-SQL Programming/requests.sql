USE Склад_214TSQL
 GO

-- создание переменных SQL
DECLARE @Код INT, @Имя VARCHAR(50), @Цена MONEY

  -- Для присвоения значения переменным можно использовать 
  -- команды SET и SELECT:
 SET @Код = 10
 SET @Имя = 'MS SQL Server'
 SET @Цена = 299.99

  -- Команда SELECT отличается от команды SET тем, что позволяет 
  -- присвоить значения сразу нескольким переменным:
 SELECT @Код = 10, @Имя = 'MS SQL Server', @Цена = 299.99 

  -- Для вывода (на экран монитора) значений переменных также 
  -- используется команда SELECT:
 SELECT @Код, @Имя, @Цена 

  -- При выводе значений переменных можно снабдить их содержательными
  -- именами. При этом идентификаторы, содержащие недопустимые символы,
  -- такие как ' ' (пробел), '%', '*' и др., должны быть заключены в 
  -- квадратные скобки: 
 SELECT @Код AS [Код товара], @Имя AS Наименование, @Цена AS 
   [Цена товара]

  -- Связку AS можно, при желании, опускать:
 SELECT @Код [Код товара], @Имя Наименование, @Цена [Цена товара]
 GO


 /*Здесь переменные @Код, @Имя, @Цена получили значения соответствующих полей последней строки набора данных, выбираемого командой SELECT (сам набор данных на экран не выводится).*/
 DECLARE @Код INT, @Имя VARCHAR(50), @Цена MONEY

-- Выборка данных из таблицы Товар с сортировкой строк 
-- по столбцу Цена в порядке возрастания 
 SELECT @Код = КодТовара, @Имя = Наименование, @Цена = Цена
 FROM Товар
 WHERE КодВалюты IN ('USD', 'EUR') 
 ORDER BY Цена -- -> сохранены сведения о товаре с наибольшей ценой в переменных

-- Вывод данных о товаре с наибольшей ценой
 SELECT @Код AS [Код товара], @Имя AS Наименование, @Цена AS 
   [MAX цена товара]

-- Выборка данных из таблицы Товар с сортировкой строк по столбцу Цена 
-- в порядке убывания 
 SELECT @Код = КодТовара, @Имя = Наименование, @Цена = Цена
 FROM Товар
 WHERE КодВалюты IN ('USD', 'EUR') 
 ORDER BY Цена DESC		-- DESC указывает на убывающий порядок сортировки

-- Вывод данных о товаре с наименьшей ценой
 SELECT @Код AS [Код товара], @Имя AS Наименование, @Цена AS
   [MIN цена товара]
 GO

 -- Можно определить также среднюю цену товаров:
 DECLARE @Цена MONEY

 SELECT @Цена = AVG(Цена)
 FROM Товар
 WHERE КодВалюты IN ('USD', 'EUR') 
-- Вывод средней цены товаров
 SELECT @Цена AS [AVG цена товаров]
 GO

/* . Пусть необходимо определить наименование товара, по которому был наибольший спрос за последние N дней. Один из вариантов решения этой задачи заключается в выполнении следующей последовательности шагов.*/
--1). Объявляем переменные, требуемые для решения данной задачи:
 DECLARE @Name VARCHAR(50), @Code INT, @Quantity NUMERIC(12,3), 
   @N INT

--2). Задаем значение интервала в днях:
 SET @N = 60

--3). Выполняем выборку данных с группировкой по кодам товаров и подсчетом для каждой группы суммарного количества заказанного товара (т.е. величины спроса). При этом результирующий набор данных будем сортировать в порядке возрастания величины спроса и, следовательно, последняя его строка будет задавать товар с наибольшим спросом. Результат выполнения этой команды на экран не выдается, а вместо этого данные последней строки сохраняются в переменных @Code и @Quantity:
 SELECT @Code = КодТовара, @Quantity = SUM(Количество)
 FROM Заказ 
 WHERE ДатаЗаказа BETWEEN GetDate() - @N AND GetDate()
 GROUP BY КодТовара
 ORDER BY SUM(Количество)

--4). По найденному в предыдущем пункте коду товара с наибольшим спросом находим соответствующее ему наименование товара:
 SELECT @Name = Наименование
 FROM Товар 
 WHERE КодТовара = @Code

--5). Выдаем найденный результат на экран: 
 SELECT @Name AS [Наименование товара], @Quantity AS 
   [Итоговое кол-во], @N AS [Временной интервал]
 GO


/*Примеры создания и использования локальных временных таблиц:*/
 CREATE TABLE #Goods (
   КодТовара 	INT  PRIMARY KEY,
   Наименование	VARCHAR(50)  NOT NULL,
   ЕдиницаИзм  	CHAR(10)  NULL
 )

 INSERT #Goods
   SELECT КодТовара, Наименование, ЕдиницаИзм 
   FROM Товар

 SELECT * FROM #Goods
 GO

 SELECT Наименование, Цена, КодВалюты 
 INTO #Goods_2
 FROM Товар

 SELECT * FROM #Goods_2
 GO

 -- примеры процедур
   /* Выбор всех регионов Беларуси */
 CREATE PROCEDURE pr_ДанныеРегионов;1 
 AS
   SELECT *
   FROM Регион
   WHERE Страна = 'Беларусь'
 GO
  /* Проверка работы хранимой процедуры pr_ДанныеРегионов;1 */
 EXEC pr_ДанныеРегионов;1
 GO

  /* Выбор всех регионов конкретной страны */
 CREATE PROCEDURE pr_ДанныеРегионов;2 
   @Страна VARCHAR(20) = 'Беларусь'
 AS
   SELECT *
   FROM Регион
   WHERE Страна = @Страна
 GO
  /* Проверка работы хранимой процедуры pr_ДанныеРегионов;2 */
 EXEC pr_ДанныеРегионов;2			-- выбираются регионы Беларуси
 EXEC pr_ДанныеРегионов;2 'Россия'		-- выбираются регионы России
 EXEC pr_ДанныеРегионов;2 'Украина'	-- выбираются регионы Украины
 GO

   /* Функция типа Scalar, возвращающая курс валюты по ее коду */
 CREATE FUNCTION fn_ВыборКурсаВалюты
   (@Код CHAR(3))
 RETURNS SMALLMONEY
 BEGIN
   DECLARE @Курс SMALLMONEY   --объявляем локальную переменную @Курс

   SELECT @Курс = КурсВалюты
   FROM Валюта     
   WHERE КодВалюты = @Код

   RETURN @Курс   --функция возвращает значение переменной @Курс
 END
 GO
  /* Проверка работы функции func_ВыборКурсаВалюты */
 DECLARE @Code CHAR(3)
 SET @Code = 'USD'
 SELECT @Code AS [Код валюты], dbo.fn_ВыборКурсаВалюты(@Code)
   AS [Курс валюты]
 GO

  /* Функция типа Inline Table-valued, возвращающая заказы по валюте*/
 CREATE FUNCTION fn_ВыборЗаказовПоВалюте
   (@Код CHAR(3))
 RETURNS TABLE 
 AS RETURN 
   SELECT Заказ.*, Товар.КодВалюты 
   FROM Заказ INNER JOIN Товар 
     ON Заказ.КодТовара = Товар.КодТовара
   WHERE Товар.КодВалюты = @Код
 GO
  /* Проверка работы функции func_ВыборЗаказовПоВалюте */
 SELECT * FROM fn_ВыборЗаказовПоВалюте('USD') 
 GO

 /* Функция типа Multi-statement Table-valued, возвращающая таблицу с новым столбцом */
 CREATE FUNCTION fn_ВыборРегионовСтраны
   (@Страна VARCHAR(20))
 RETURNS @CountryRegions TABLE (
   КодРегиона INT PRIMARY KEY,
   Страна   VARCHAR(20) NOT NULL,
   Город	   VARCHAR(20) NULL,
   ОбластнойЦентр BIT NULL)
 BEGIN 
   -- Объявляем локальную переменную @rowset типа таблица
   DECLARE @rowset TABLE (
     КодРегиона INT PRIMARY KEY,
     Страна   VARCHAR(20) NOT NULL,
     Область  VARCHAR(20) NULL,
     Город    VARCHAR(20) NULL,
     ОбластнойЦентр BIT DEFAULT 0 NULL)

   -- Заносим данные в локальную переменную @rowset
   INSERT @rowset (КодРегиона, Страна, Область, Город)
     SELECT КодРегиона, Страна, Область, Город
     FROM Регион 
     WHERE Страна = @Страна

   -- Заносим данные в столбец "ОбластнойЦентр" переменной @rowset
   UPDATE @rowset
   SET ОбластнойЦентр = 1
   WHERE Область = ''
 
   -- Заносим данные в результирующую переменную @CountryRegion типа таблица, т.к.
   -- локальная переменная @rowset после  выхода из функции автоматически уничтожается
   INSERT @CountryRegions
     SELECT КодРегиона, Страна, Город, ОбластнойЦентр 
     FROM @rowset

   RETURN
 END
 GO
  /* Проверка работы функции fn_ВыборРегионовСтраны */
 SELECT * FROM fn_ВыборРегионовСтраны('Беларусь') 
 SELECT * FROM fn_ВыборРегионовСтраны('Россия') 
 GO


